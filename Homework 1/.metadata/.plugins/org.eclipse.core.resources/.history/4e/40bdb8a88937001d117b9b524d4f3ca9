package edu.iastate.cs228.hw1;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Random;
import java.util.Scanner;


/**
 *  @author <<Write your name here>>
 *
 */
public class Town 
{
	
	private int length, width;  //Row and col (first and second indices)
	public TownCell[][] grid;
	
	private int startSeed; //The seed to start the town.
	
	/**
	 * Constructor to be used when user wants to generate grid randomly, with the given seed.
	 * This constructor does not populate each cell of the grid (but should assign a 2D array to it).
	 * @param length
	 * @param width
	 */
	public Town(int length, int width) 
	{
		grid = new TownCell[length][width];
		randomInit(this.startSeed);
	}
	
	/**
	 * Constructor to be used when user wants to populate grid based on a file.
	 * Please see that it simple throws FileNotFoundException exception instead of catching it.
	 * Ensure that you close any resources (like file or scanner) which is opened in this function.
	 * @param inputFileName
	 * @throws FileNotFoundException
	 */
	public Town(String inputFileName) throws FileNotFoundException 
	{
		//TODO: Write your code here.
	}
	
	/**
	 * Returns width of the grid.
	 * @return width
	 */
	public int getWidth() 
	{
		return this.width;
	}
	
	/**
	 * Returns length of the grid.
	 * @return length
	 */
	public int getLength() 
	{
		return this.length;
	}

	/**
	 * Initialize the grid by randomly assigning cell with one of the following class object:
	 * Casual, Empty, Outage, Reseller OR Streamer
	 */
	
	// constants to be used as indices.
//	protected static final int RESELLER = 0;
//	protected static final int EMPTY = 1;
//	protected static final int CASUAL = 2;
//	protected static final int OUTAGE = 3;
//	protected static final int STREAMER = 4;
	public void randomInit(int seed) 
	{
		Random rand = new Random(seed);
		int r = rand.nextInt(5);
		
		for(int i = 0; i < grid.length; i ++)
		{
			for(int j = 0; j < grid[i].length; j ++)
			{
				switch(r)
				{
				case 0:
					grid[i][j] = new Reseller(this, i, j);
					break;
				case 1: 
					grid[i][j] = new Empty(this, i, j);
					break;
				case 2: 
					grid[i][j] = new Casual(this, i, j);
					break;
				case 3:
					grid[i][j] = new Outage(this, i, j);
					break;
				case 4: 
					grid[i][j] = new Streamer(this, i, j);
					break;
				}
			}
		}
	}
	
	/**
	 * Output the town grid. For each square, output the first letter of the cell type.
	 * Each letter should be separated either by a single space or a tab.
	 * And each row should be in a new line. There should not be any extra line between 
	 * the rows.
	 */
	@Override
	public String toString() 
	{
		String s = "";
		
		for(int i = 0; i < grid.length; i++)
		{
			for(int j = 0; j < grid[i].length; j++)
			{
				s = s + checkValue(grid[i][j]) + " ";
			}
			s = s + "\n";
		}
		return s;
	}
	
	private String checkValue(TownCell c)
	{
		State state = c.who();
		
		switch(state)
		{
			case EMPTY:
				return "E";
			case CASUAL:
				return "C";
			case OUTAGE:
				return "O";
			case STREAMER:
				return "S";
			case RESELLER:
				return "R";
		}
	}
	
	/**
	 * Sets the starting seed to generate the town.
	 */
	public void setSeed(int s)
	{
		this.startSeed = s;
	}
}
